Menu="Tools:Unraid OS"
Title="Port Manager"
Icon="hexagon-nodes-solid-full"
---
<?PHP
/* Copyright 2025, Nathan Sanders.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 */
require_once 'include/port_scanner.php';
$scanner = new PortScanner();
?>

<div class="port-manager-container" style="padding: 20px; max-width: 1200px; margin: 0 auto;">
    <h1>Port Manager</h1>
    <p>View and manage all ports in use across your Unraid system including Docker containers, VMs, and system services.</p>
    
    <div class="stats-container" style="display: flex; gap: 20px; margin-bottom: 20px; flex-wrap: wrap;">
        <div class="stat-card" style="background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); flex: 1; min-width: 150px; text-align: center;">
            <div class="stat-number" id="docker-count" style="font-size: 2em; font-weight: bold; margin-bottom: 5px;">-</div>
            <div class="stat-label" style="color: #666; font-size: 0.9em;">Docker Ports</div>
        </div>
        <div class="stat-card" style="background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); flex: 1; min-width: 150px; text-align: center;">
            <div class="stat-number" id="vm-count" style="font-size: 2em; font-weight: bold; margin-bottom: 5px;">-</div>
            <div class="stat-label" style="color: #666; font-size: 0.9em;">VM Ports</div>
        </div>
        <div class="stat-card" style="background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); flex: 1; min-width: 150px; text-align: center;">
            <div class="stat-number" id="system-count" style="font-size: 2em; font-weight: bold; margin-bottom: 5px;">-</div>
            <div class="stat-label" style="color: #666; font-size: 0.9em;">System Ports</div>
        </div>
        <div class="stat-card" style="background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); flex: 1; min-width: 150px; text-align: center;">
            <div class="stat-number" id="total-count" style="font-size: 2em; font-weight: bold; margin-bottom: 5px;">-</div>
            <div class="stat-label" style="color: #666; font-size: 0.9em;">Total Ports</div>
        </div>
    </div>
    
    <div class="search-controls" style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; display: flex; gap: 15px; align-items: center; flex-wrap: wrap;">
        <input type="text" id="search-input" placeholder="Search ports, services, or IP addresses..." style="flex: 1; min-width: 200px; padding: 8px 12px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;">
        <select id="category-filter" style="padding: 8px 12px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;">
            <option value="all">All Categories</option>
            <option value="docker">Docker Only</option>
            <option value="vms">VMs Only</option>
            <option value="system">System Only</option>
        </select>
        <button onclick="loadPorts()" style="background: #337ab7; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; font-size: 14px;">Refresh</button>
        <button onclick="suggestPort()" style="background: #337ab7; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; font-size: 14px;">Suggest Port</button>
        <span id="suggested-port-result"></span>
    </div>
    
    <div id="ports-content">
        <div style="text-align: center; padding: 40px; color: #666;">Loading port information...</div>
    </div>
</div>

<script>
let allPorts = [];
let filteredPorts = [];

document.addEventListener('DOMContentLoaded', function() {
    loadPorts();
    
    document.getElementById('search-input').addEventListener('input', filterPorts);
    document.getElementById('category-filter').addEventListener('change', filterPorts);
});

function loadPorts() {
    fetch('/plugins/port-manager/api.php?action=getAllPorts')
        .then(response => response.json())
        .then(data => {
            allPorts = [];
            
            if (data.docker) {
                allPorts = allPorts.concat(data.docker);
            }
            if (data.vms) {
                allPorts = allPorts.concat(data.vms);
            }
            if (data.system) {
                allPorts = allPorts.concat(data.system);
            }
            
            updateStats(data);
            filterPorts();
        })
        .catch(error => {
            console.error('Error loading ports:', error);
            document.getElementById('ports-content').innerHTML = 
                '<div style="text-align: center; padding: 40px; color: #999;">Error loading port information. Please try refreshing the page.</div>';
        });
}

function updateStats(data) {
    document.getElementById('docker-count').textContent = data.docker ? data.docker.length : 0;
    document.getElementById('vm-count').textContent = data.vms ? data.vms.length : 0;
    document.getElementById('system-count').textContent = data.system ? data.system.length : 0;
    document.getElementById('total-count').textContent = allPorts.length;
}

function filterPorts() {
    const searchTerm = document.getElementById('search-input').value.toLowerCase();
    const category = document.getElementById('category-filter').value;
    
    filteredPorts = allPorts.filter(port => {
        const matchesCategory = category === 'all' || port.type === category;
        const matchesSearch = searchTerm === '' || 
            port.service.toLowerCase().includes(searchTerm) ||
            port.host_port.toString().includes(searchTerm) ||
            port.host_ip.toLowerCase().includes(searchTerm) ||
            port.protocol.toLowerCase().includes(searchTerm);
        
        return matchesCategory && matchesSearch;
    });
    
    renderPortsTable();
}

function renderPortsTable() {
    const content = document.getElementById('ports-content');
    
    if (filteredPorts.length === 0) {
        content.innerHTML = '<div style="text-align: center; padding: 40px; color: #999;">No ports found matching your criteria.</div>';
        return;
    }
    
    let html = '<table style="width: 100%; border-collapse: collapse; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1);"><thead><tr style="background: #337ab7; color: white;">';
    html += '<th style="padding: 12px; text-align: left;">Service</th>';
    html += '<th style="padding: 12px; text-align: left;">Type</th>';
    html += '<th style="padding: 12px; text-align: left;">Host IP</th>';
    html += '<th style="padding: 12px; text-align: left;">Host Port</th>';
    html += '<th style="padding: 12px; text-align: left;">Internal Port</th>';
    html += '<th style="padding: 12px; text-align: left;">Protocol</th>';
    html += '<th style="padding: 12px; text-align: left;">Status</th>';
    html += '<th style="padding: 12px; text-align: left;">Details</th>';
    html += '</tr></thead><tbody>';
    
    filteredPorts.forEach(port => {
        html += '<tr style="border-bottom: 1px solid #eee;">';
        html += '<td style="padding: 12px;">' + escapeHtml(port.service) + '</td>';
        html += '<td style="padding: 12px;"><span style="color: ' + getTypeColor(port.type) + ';">' + port.type.toUpperCase() + '</span></td>';
        html += '<td style="padding: 12px;">' + escapeHtml(port.host_ip) + '</td>';
        html += '<td style="padding: 12px;"><strong>' + port.host_port + '</strong></td>';
        html += '<td style="padding: 12px;">' + port.container_port + '</td>';
        html += '<td style="padding: 12px;">' + port.protocol.toUpperCase() + '</td>';
        html += '<td style="padding: 12px;"><span style="color: ' + getStatusColor(port.status) + '; font-weight: bold;">' + port.status + '</span></td>';
        html += '<td style="padding: 12px;">' + getPortDetails(port) + '</td>';
        html += '</tr>';
    });
    
    html += '</tbody></table>';
    content.innerHTML = html;
}

function getTypeColor(type) {
    switch(type) {
        case 'docker': return '#007bff';
        case 'vm': return '#28a745';
        case 'system': return '#dc3545';
        default: return '#666';
    }
}

function getStatusColor(status) {
    switch(status) {
        case 'active': return '#28a745';
        case 'listening': return '#17a2b8';
        default: return '#666';
    }
}

function getPortDetails(port) {
    let details = [];
    
    if (port.process) {
        details.push('Process: ' + escapeHtml(port.process));
    }
    if (port.scope) {
        details.push('Scope: ' + escapeHtml(port.scope));
    }
    if (port.description) {
        details.push('Description: ' + escapeHtml(port.description));
    }
    
    return details.join('<br>');
}

function suggestPort() {
    const startPort = prompt('Start port range (default: 8080):', '8080');
    const endPort = prompt('End port range (default: 9999):', '9999');
    
    if (startPort && endPort) {
        fetch('/plugins/port-manager/api.php?action=suggestPort&start=' + startPort + '&end=' + endPort)
            .then(response => response.json())
            .then(data => {
                const resultElement = document.getElementById('suggested-port-result');
                if (data.suggested_port) {
                    resultElement.innerHTML = '<span style="margin-left: 10px; padding: 8px 12px; background: #d4edda; border: 1px solid #c3e6cb; border-radius: 4px; color: #155724; font-weight: bold;">Suggested: ' + data.suggested_port + '</span>';
                } else {
                    resultElement.innerHTML = '<span style="margin-left: 10px; padding: 8px 12px; background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 4px; color: #721c24; font-weight: bold;">No available ports in range</span>';
                }
                
                setTimeout(() => {
                    resultElement.innerHTML = '';
                }, 5000);
            })
            .catch(error => {
                console.error('Error suggesting port:', error);
            });
    }
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}
</script>